<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:behaviors="clr-namespace:SharedModules.Common.UI.Behaviors"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:ui1="clr-namespace:SharedModules.Common.UI">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SharedModules.Common.UI;component/Styles/Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <system:Double x:Key="TinyFontSize">10</system:Double>
    <system:Double x:Key="SmallFontSize">11</system:Double>
    <system:Double x:Key="NormalFontSize">12</system:Double>
    <system:Double x:Key="MediumFontSize">14</system:Double>
    <system:Double x:Key="MediumLargeFontSize">16</system:Double>
    <system:Double x:Key="LargeFontSize">18</system:Double>
    <system:Double x:Key="ExtraLargeFontSize">22</system:Double>
    <system:Double x:Key="HugeFontSize">39</system:Double>

    <FontFamily x:Key="DefaultFontFamily">Segoe UI</FontFamily>

    <ui1:CopyTextCommand x:Key="CopyTextCommand"/>

    <!-- Чистые стили TextBlock -->

    <Style x:Key="BaseTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
    </Style>

    <Style x:Key="TinyTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource TinyFontSize}" />
    </Style>

    <Style x:Key="SmallTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}" />
    </Style>

    <Style x:Key="NormalTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource NormalFontSize}" />
    </Style>

    <Style x:Key="MediumTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource MediumFontSize}" />
    </Style>

    <Style x:Key="MediumLargeTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource MediumLargeFontSize}" />
    </Style>

    <Style x:Key="LargeTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}" />
    </Style>

    <!-- Чистые стили TextBlock -->

    <Style x:Key="ToolTipedTextBox" TargetType="TextBox">
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip ToolTipService.InitialShowDelay="3000" DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Text}">
                    <TextBlock MaxWidth="500" MaxHeight="500" TextTrimming="CharacterEllipsis" TextWrapping="Wrap" Text="{Binding}"/>
                </ToolTip>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border      
                      x:Name="Border"    
                      CornerRadius="0"      
                      Padding="2"    
                      Background="Transparent"    
                      BorderBrush="Transparent"
                      BorderThickness="0">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="VerticalScrollBarVisibility" Value="Visible"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Пришлось скопипастить стиль ToolTipedTextBox без сеттера Template, т.к. иначе невозможно изменить Border -->
    <Style x:Key="NormalToolTipedTextBox" TargetType="TextBox">
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip ToolTipService.InitialShowDelay="3000" DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Text}">
                    <TextBlock MaxWidth="500" MaxHeight="500" TextTrimming="CharacterEllipsis" TextWrapping="Wrap" Text="{Binding}"/>
                </ToolTip>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="{StaticResource MainBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Border"    
                        CornerRadius="0"      
                        Padding="2"    
                        Background="{TemplateBinding Background}"    
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                            <!--<Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="VerticalScrollBarVisibility" Value="Visible"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ClipboardTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="Background" Value="Transparent"/>
        <!--копирование по клику-->
        <Setter Property="behaviors:ClipboardManager.IsEnabled" Value="True"/>
        <Setter Property="behaviors:ClipboardManager.Text" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}"/>
        <!--мигание по клику-->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <EventTrigger RoutedEvent="TextBlock.PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)"
                                From="Transparent" To="#FFCCCCCC" 
                                Duration="0:0:0.1" AutoReverse="True" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolTipedTextBlock" TargetType="TextBlock" BasedOn="{StaticResource ClipboardTextBlockStyle}">
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip ToolTipService.InitialShowDelay="3000" DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Text, TargetNullValue='-'}">
                    <TextBlock MaxWidth="300" MaxHeight="500" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Text="{Binding TargetNullValue='-'}"/>
                </ToolTip>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolTipedTextBlockWithoutCopy" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip ToolTipService.InitialShowDelay="3000" DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Text}">
                    <TextBlock MaxWidth="300" MaxHeight="500" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Text="{Binding}"/>
                </ToolTip>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SmallToolTipedTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource ToolTipedTextBlock}">
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}" />
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="SmallToolTipedTextBlockStyleWithoutCopy" TargetType="TextBlock" BasedOn="{StaticResource ToolTipedTextBlockWithoutCopy}">
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}" />
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="NormalTextBlockTooltipStyle" TargetType="TextBlock" BasedOn="{StaticResource ToolTipedTextBlock}">
        <Setter Property="FontSize" Value="{StaticResource NormalFontSize}" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="ShortTextStyle" TargetType="TextBlock" BasedOn="{StaticResource ToolTipedTextBlock}">
        <Setter Property="Margin" Value="10,5,0,5"/>
        <Setter Property="FontSize" Value="{StaticResource NormalFontSize}" />
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <Style TargetType="Viewbox" x:Key="InGridCellViewBox">
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>

    <Style x:Key="TextBlockLarge2Style" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource DarkGrayBrush3}" />
        <Setter Property="FontWeight" Value="Light"/>
    </Style>

    <Style x:Key="TextBlockSmall2Style" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource TinyFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource DarkGrayBrush3}" />
    </Style>

    <Style x:Key="TextBlockSmall2InverseStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource TinyFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource LightGrayBrush}" />
    </Style>

    <Style x:Key="TextBlockHugeStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource HugeFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource StatesIconsBackground}" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center" />
    </Style>

    <Style x:Key="TextBlockLarge22Style" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource ExtraLargeFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource StatesIconsBackground}" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center" />
    </Style>

    <Style TargetType="TextBlock" x:Key="Header" BasedOn="{StaticResource MediumTextBlockStyle}">
        <Setter Property="Foreground" Value="{StaticResource DarkGrayBrush3}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Style.Triggers>
            <DataTrigger Value="True"
                        Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TabItem}}">
                <Setter Property="FontWeight" Value="SemiBold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--#region Стили для TextBox'а-->

    <Style x:Key="BaseTextBoxStyle" TargetType="TextBox">
        <Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
    </Style>

    <Style x:Key="ClipboardTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource BaseTextBoxStyle}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="{StaticResource MainBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="Border"    
                        CornerRadius="0"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"    
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">

                        <ScrollViewer Margin="0" x:Name="PART_ContentHost">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                                    <i:InvokeCommandAction Command="{StaticResource CopyTextCommand}" 
                                                               CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                            <!--<Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--копирование по клику-->
        <!--        <Setter Property="behaviors:ClipboardManager.IsEnabled" Value="True"/>-->
        <!--        <Setter Property="behaviors:ClipboardManager.Text" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}"/>-->
        <!--мигание по клику-->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <EventTrigger RoutedEvent="TextBox.PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetProperty="(TextBox.Background).(SolidColorBrush.Color)"
                                From="Transparent" To="#FFCCCCCC" 
                                Duration="0:0:0.1" AutoReverse="True" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolTipedTextBoxBase" TargetType="TextBox" BasedOn="{StaticResource ClipboardTextBoxStyle}">
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip ToolTipService.InitialShowDelay="3000" DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Text, TargetNullValue='-'}">
                    <TextBlock MaxWidth="300" MaxHeight="500" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Text="{Binding TargetNullValue='-'}"/>
                </ToolTip>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SmallToolTipedTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource ToolTipedTextBoxBase}">
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}" />
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="NormalToolTipedTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource ToolTipedTextBoxBase}">
        <Setter Property="FontSize" Value="{StaticResource NormalFontSize}" />
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!--#endregion Стили для TextBox'а-->

</ResourceDictionary>